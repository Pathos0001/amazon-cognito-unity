using System;
using System.Collections.Generic;
using System.Linq;

using Amazon.AWSSupport;
using Amazon.AWSSupport.Model;
using Amazon;
using System.IO;
using System.Text;
using CommonTests.Framework;
using NUnit.Framework;

namespace CommonTests.IntegrationTests
{
    [TestFixture]
    public class AWSSupportTests : TestBase<AmazonAWSSupportClient>
    {
        private static String
            SUBJECT = ".NET SDK Test Case " + DateTime.UtcNow.Ticks,
            CATEGORY_CODE = "apis",
            SERVICE_CODE = "amazon-dynamodb",
            COMMUNICATION_BODY = "This is a test case generated by the .NET SDK integration test suite",
            LANGUAGE = "ja",
            SEVERITY_CODE = "low",
            ATTACHMENT_CONTENTS = "This is test data";

        protected override RegionEndpoint AlternateEndpoint
        {
            get
            {
                return RegionEndpoint.USEast1;
            }
        }

        [OneTimeTearDown]
        public void ClassCleanup()
        {
            BaseClean();
        }

        //  Test are disabled because not all acounts are subscribed to AWS Support
        //[Test]
        public void TestCaseOperations()
        {
            string caseId = null;

            try
            {
                caseId = Client.CreateCaseAsync(new CreateCaseRequest
                {
                    Subject = SUBJECT,
                    CategoryCode = CATEGORY_CODE,
                    ServiceCode = SERVICE_CODE,
                    Language = LANGUAGE,
                    SeverityCode = SEVERITY_CODE,
                    CommunicationBody = COMMUNICATION_BODY
                }).Result.CaseId;

                Assert.IsNotNull(caseId);

                var cases = Client.DescribeCasesAsync(new DescribeCasesRequest { Language = LANGUAGE }).Result.Cases;
                Assert.IsTrue(cases.Count > 0);

                cases = Client.DescribeCasesAsync(new DescribeCasesRequest { Language = LANGUAGE, CaseIdList = new List<string> { caseId } }).Result.Cases;
                Assert.AreEqual(1, cases.Count);

                Assert.AreEqual(caseId, cases[0].CaseId);
                Assert.AreEqual(CATEGORY_CODE, cases[0].CategoryCode);
                Assert.AreEqual(LANGUAGE, cases[0].Language);
                Assert.AreEqual(SERVICE_CODE, cases[0].ServiceCode);
                Assert.AreEqual(SEVERITY_CODE, cases[0].SeverityCode);
                Assert.IsTrue(cases[0].RecentCommunications.Communications.Count > 0);

                var attachmentData = new MemoryStream(Encoding.UTF8.GetBytes(ATTACHMENT_CONTENTS));
                var filename = "file1.txt";
                var attachmentSetId = Client.AddAttachmentsToSetAsync(new AddAttachmentsToSetRequest
                {
                    Attachments = new List<Attachment>
                    {
                        new Attachment
                        {
                            FileName = filename,
                            Data = attachmentData
                        }
                    }
                }).Result.AttachmentSetId;

                var result = Client.AddCommunicationToCaseAsync(new AddCommunicationToCaseRequest
                {
                    CaseId = caseId,
                    CcEmailAddresses = new List<string> { "aws-dr-tools-test@amazon.com" },
                    CommunicationBody = COMMUNICATION_BODY,
                    AttachmentSetId = attachmentSetId
                }).Result;

                Assert.IsNotNull(result);

                var comms = Client.DescribeCommunicationsAsync(new DescribeCommunicationsRequest { CaseId = caseId }).Result.Communications;
                Assert.IsTrue(comms.Count > 0);
                Assert.AreEqual(caseId, comms[0].CaseId);
                Assert.AreEqual(COMMUNICATION_BODY.Trim(), comms[0].Body.Trim());
                Assert.IsNotNull(comms[0].SubmittedBy);
                Assert.IsNotNull(comms[0].TimeCreated);

                string attachmentId = null;
                attachmentId = GetAttachmentId(comms, attachmentId);
                Assert.IsNotNull(attachmentId);

                VerifyAttachment(attachmentData, filename, attachmentId);

                cases = Client.DescribeCasesAsync(new DescribeCasesRequest { Language = LANGUAGE, CaseIdList = new List<string> { caseId }, IncludeCommunications = true }).Result.Cases;
                Assert.AreEqual(1, cases.Count);
                var communications = cases[0].RecentCommunications;
                attachmentId = GetAttachmentId(communications.Communications, attachmentId);
                VerifyAttachment(attachmentData, filename, attachmentId);
            }
            finally
            {
                if (caseId != null)
                {
                    Client.ResolveCaseAsync(new ResolveCaseRequest { CaseId = caseId }).Wait();
                }
            }
        }

        private void VerifyAttachment(MemoryStream attachmentData, string filename, string attachmentId)
        {
            var attachment = Client.DescribeAttachmentAsync(new DescribeAttachmentRequest
            {
                AttachmentId = attachmentId
            }).Result.Attachment;
            Assert.IsNotNull(attachment);
            Assert.AreEqual(
                Encoding.UTF8.GetString(attachmentData.ToArray()),
                Encoding.UTF8.GetString(attachment.Data.ToArray()));
            Assert.AreEqual(filename, attachment.FileName);
        }

        private static string GetAttachmentId(List<Communication> comms, string attachmentId)
        {
            foreach (var comm in comms)
            {
                var attachmentSet = comm.AttachmentSet;
                if (attachmentSet != null && attachmentSet.Count > 0)
                {
                    foreach (var att in attachmentSet)
                    {
                        if (!string.IsNullOrEmpty(att.AttachmentId))
                            attachmentId = att.AttachmentId;
                    }
                }
            }
            return attachmentId;
        }

        //  Test are disabled because not all acounts are subscribed to AWS Support
        //[Test]
        public void TestDescribeServices()
        {
            var services = Client.DescribeServicesAsync().Result.Services;
            Assert.IsTrue(services.Count > 0);
            Assert.IsNotNull(services[0].Code);
            Assert.IsNotNull(services[0].Name);
            Assert.IsTrue(services[0].Categories.Count > 0);
            Assert.IsNotNull(services[0].Categories[0].Code);
            Assert.IsNotNull(services[0].Categories[0].Name);

            services = Client.DescribeServicesAsync(new DescribeServicesRequest { ServiceCodeList = new List<string> { SERVICE_CODE } }).Result.Services;
            Assert.AreEqual(1, services.Count);
            Assert.IsNotNull(services[0].Name);
            Assert.AreEqual(SERVICE_CODE, services[0].Code);
        }

        //  Test are disabled because not all acounts are subscribed to AWS Support
        //[Test]
        public void TestSeverityLevels()
        {
            var levels = Client.DescribeSeverityLevelsAsync().Result.SeverityLevels;
            Assert.IsTrue(levels.Count > 0);
            Assert.IsNotNull(levels[0].Name);
            Assert.IsNotNull(levels[0].Code);
        }

        //  Test are disabled because not all acounts are subscribed to AWS Support
        //[Test]
        public void TestTrustedAdvisorChecks()
        {
            var checks = Client.DescribeTrustedAdvisorChecksAsync(new DescribeTrustedAdvisorChecksRequest { Language = LANGUAGE }).Result.Checks;
            Assert.IsTrue(checks.Count > 0);

            var checkId = checks[0].Id;
            Assert.IsNotNull(checks[0].Name);
            Assert.IsNotNull(checks[0].Category);
            Assert.IsNotNull(checks[0].Description);
            Assert.IsTrue(checks[0].Metadata.Count > 0);
            Assert.IsNotNull(checks[0].Metadata[0]);

            var statuses = Client.DescribeTrustedAdvisorCheckRefreshStatusesAsync(new DescribeTrustedAdvisorCheckRefreshStatusesRequest { CheckIds = new List<string> { checkId } }).Result.Statuses;

            Assert.AreEqual(1, statuses.Count);
            Assert.AreEqual(checkId, statuses[0].CheckId);
            Assert.IsNotNull(statuses[0].Status);
            Assert.IsNotNull(statuses[0].MillisUntilNextRefreshable);

            var status = Client.RefreshTrustedAdvisorCheckAsync(new RefreshTrustedAdvisorCheckRequest { CheckId = checkId }).Result.Status;
            Assert.IsNotNull(status);

            var summaries = Client.DescribeTrustedAdvisorCheckSummariesAsync(new DescribeTrustedAdvisorCheckSummariesRequest { CheckIds = new List<string> { checkId } })
                .Result.Summaries;

            Assert.AreEqual(1, summaries.Count);
            Assert.AreEqual(checkId, summaries[0].CheckId);
            Assert.IsNotNull(summaries[0].Status);
            Assert.IsNotNull(summaries[0].Timestamp);
            Assert.IsNotNull(summaries[0].ResourcesSummary);
            Assert.IsNotNull(summaries[0].CategorySpecificSummary);

            var resultresult = Client.DescribeTrustedAdvisorCheckResultAsync(new DescribeTrustedAdvisorCheckResultRequest { CheckId = checkId }).Result.Result;

            Assert.IsNotNull(resultresult.Timestamp);
            Assert.IsNotNull(resultresult.Status);
            Assert.IsNotNull(resultresult.ResourcesSummary);
        }
    }
}
