<#@ template language="C#" inherits="Generators.BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>


using System;
using System.IO;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using <#=this.Config.Namespace#>;
using <#=this.Config.Namespace#>.Model;
using <#=this.Config.Namespace#>.Model.Internal.MarshallTransformations;
using Amazon.Runtime.Internal.Transform;

using ServiceClientGenerator;

using AWSSDK_DotNet35.UnitTests.TestTools;

namespace AWSSDK_DotNet35.UnitTests.Marshalling
{
    [TestClass]
    public class <#=this.Config.ClassName#>MarshallingTests
    {
        static readonly ServiceModel service_model = Utils.LoadServiceModel("<#= this.Config.ServiceDirectoryName #>");
		<#
		foreach(var operation in this.Config.ServiceModel.Operations)
		{
		#>

        [TestMethod]
		[TestCategory("UnitTest")]
		[TestCategory("Json")]
		[TestCategory("<#=this.Config.TestCategory#>")]
        public void <#=operation.Name#>MarshallTest()
        {
            var request = InstantiateClassGenerator.Execute<<#=operation.Name#>Request>();
            var marshaller = new <#=operation.Name#>RequestMarshaller();

            var internalRequest = marshaller.Marshall(request);
<#
            if(operation.RequestStructure != null)
            {
#>
            var jsonRequest = UTF8Encoding.UTF8.GetString(internalRequest.Content);			            
			Comparer.CompareObjectToJson<<#=operation.Name#>Request>(request,jsonRequest);

<#
            }

            if(operation.ResponseStructure != null)
            {
#>
			var webResponse = new WebResponseData
			{
				Headers = {
					{"x-amzn-RequestId", Guid.NewGuid().ToString()},
					{"x-amz-crc32","0"}
				}
			};
            var jsonResponse = new JsonSampleGenerator(service_model, service_model.FindOperation("<#=operation.Name#>").ResponseStructure).Execute();
			webResponse.Headers.Add("Content-Length", UTF8Encoding.UTF8.GetBytes(jsonResponse).Length.ToString());
            UnmarshallerContext context = new JsonUnmarshallerContext(Utils.CreateStreamFromString(jsonResponse), false, webResponse);
            var response = <#=operation.Name#>ResponseUnmarshaller.Instance.Unmarshall(context)
				as <#=operation.Name#>Response;
			InstantiateClassGenerator.ValidateObjectFullyInstantiated(response);
<#
            }
#>
        }

		<#
		}
		#>
    }
}