<#@ template language="C#" inherits="BaseGenerator" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	AddLicenseHeader();
#>
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;

using Amazon.Runtime;
using Amazon.Runtime.Internal;
<#
if(this.StructureType == StructureType.Request && this.Operation.AuthType.HasValue)
{
#>
using Amazon.Runtime.Internal.Auth;
<#
}
#>

namespace <#=this.Config.Namespace#>.Model
{
<#
	if(this.StructureType == StructureType.Request)
		this.FormatOperationRequestDocumentation(this.Operation);
	else if (this.Operation != null && GeneratorHelpers.HasSuppressedResult(this.Operation))
		this.FormatVoidResultDocumentation(this.Operation.Name);
	else if(this.StructureType == StructureType.Response && (this.Structure == null || string.IsNullOrEmpty(this.Structure.Documentation)))
	{
#>
	/// <summary>
	/// This is the response object from the <#=this.Operation.Name#> operation.
	/// </summary>
<#
	}
	else
	    this.FormatClassDocumentation(this.Structure);  
#>
	public partial class <#=this.ClassName#><#=this.BaseClassString#>
	{
<#
        if(this.Structure != null)
        {
            if(this.IsWrapped)
            {
#>
        private <#=this.Structure.Name#> _response;
<#
            }
            else
            {
		        foreach(var member in this.Structure.Members)
                {
					if (member.IsExcluded)
						continue;
#>
        private <#=member.DetermineType()#><#= member.IsNullable ? "?" : "" #> <#=member.VariableName#><#= member.ShouldInstantiate ? string.Format(" = new {0}();", member.DetermineType()) : ";"#>
<#
                }
            }
        }
#>

<#
        if(this.Structure != null)
        {
            if(this.IsWrapped)
            {
#>
        /// <summary>
        /// Gets and sets the <#=this.Structure.Name#> property.
        /// </summary>
        public <#=this.Structure.Name#> <#=this.Structure.Name#>
        {
            get { return this._response; }
            set { this._response = value; }
        }
<#
            }
            else
            {
        AddSimpleRequestConstructors(this.ClassName, this.Structure, this.Config.Namespace);
		        foreach(var member in this.Structure.Members)
                {
					if (member.IsExcluded)
						continue;
#>
<# this.FormatPropertyDocumentation(member); #>
        <#=member.AccessModifier#> <#=member.DetermineType()#><#=member.UseNullable ? "?" : ""#> <#=member.PropertyName#>
        {
<#
                    if(member.IsNullable && !member.UseNullable)
                    {
#>
            get { return this.<#=member.VariableName#>.GetValueOrDefault(); }
<#
                    }
                    else
                    {
#>
            get { return this.<#=member.VariableName#>; }
<#
                    }
#>
            set { this.<#=member.VariableName#> = value; }
        }

<#
                    if (member.EmitIsSetProperties)
                    {
#>
        /// <summary>
        /// This property is set to true if the property <seealso cref="<#=member.PropertyName#>"/>
        /// is set; false otherwise.
        /// This property can be used to determine if the related property
        /// was returned by a service response or if the related property
        /// should be sent to the service during a service call.
        /// </summary>
        /// <returns>
        /// True if the related property was set or will be sent to a service; false otherwise.
        /// </returns>
        public bool Is<#=member.PropertyName#>Set
        {
            get
            {
                return Amazon.Util.Internal.InternalSDKUtils.GetIsSet(this.<#=member.VariableName#>);
            }
            set
            {
                Amazon.Util.Internal.InternalSDKUtils.SetIsSet(value, ref this.<#=member.VariableName#>);
            }
        }

<#
                    }
#>
        // Check to see if <#=member.PropertyName#> property is set
        internal bool IsSet<#=member.PropertyName#>()
        {
<#
                    if (member.EmitIsSetProperties)
                    {
#>
            return this.Is<#=member.PropertyName#>Set; 
<#
                    }
                    else if (member.IsNullable)
                    {
#>
            return this.<#=member.VariableName#>.HasValue; 
<#
                    }
                    else if (member.IsMap || member.IsList)
                    {
#>
            return this.<#=member.VariableName#> != null && this.<#=member.VariableName#>.Count > 0; 
<#
                    }
                    else
                    {
#>
            return this.<#=member.VariableName#> != null;
<#
                    }
#>
        }

<#
                }

                if (this.StructureType == StructureType.Request && this.Operation.AuthType.HasValue)
                {
#>
        /// <summary>
        /// Get the signer to use for this request.
        /// </summary>
        /// <returns>A signer for this request.</returns>
        override protected AbstractAWSSigner CreateSigner()
        {
<#
                    switch (this.Operation.AuthType.Value)
                    {
                        case OperationAuthType.None:
#>
            return new NullSigner();
<#
                        break;
                        case OperationAuthType.V4:
#>
            return new AWS4Signer();
<#
                        break;
                        case OperationAuthType.V4UnsignedBody:
#>
            return new AWS4Signer(false);
<#
                        break;
                        default:
                            throw new ArgumentException("Unhandled value for operation authtype:" + this.Operation.AuthType.Value);
                    }
#>
        }
<#
                }

            }
        }
#>
    }
}


<#+
    // Set to true when the service model specifies a shape that should be wrapped in a response. ElastiCache CreateCacheCluster is an example of this.
    public bool IsWrapped { get; set; }

	public Operation Operation { get; set; }
    public string ClassName { get; set; }
    public string BaseClass { get; set; }
    public Shape Structure { get; set; }
	public StructureType StructureType { get; set; }
#>